//header.js


import { getMetadata } from '../../scripts/aem.js';
import { loadFragment } from '../fragment/fragment.js';

// media query match that indicates mobile/tablet width
const isDesktop = window.matchMedia('(min-width: 900px)');

function closeOnEscape(e) {
  if (e.code === 'Escape') {
    const nav = document.getElementById('nav');
    const navSections = nav.querySelector('.nav-sections');
    const navSectionExpanded = navSections.querySelector('[aria-expanded="true"]');
    if (navSectionExpanded && isDesktop.matches) {
      // eslint-disable-next-line no-use-before-define
      toggleAllNavSections(navSections);
      navSectionExpanded.focus();
    } else if (!isDesktop.matches) {
      // eslint-disable-next-line no-use-before-define
      toggleMenu(nav, navSections);
      nav.querySelector('button').focus();
    }
  }
}

function closeOnFocusLost(e) {
  const nav = e.currentTarget;
  if (!nav.contains(e.relatedTarget)) {
    const navSections = nav.querySelector('.nav-sections');
    const navSectionExpanded = navSections.querySelector('[aria-expanded="true"]');
    if (navSectionExpanded && isDesktop.matches) {
      // eslint-disable-next-line no-use-before-define
      toggleAllNavSections(navSections, false);
    } else if (!isDesktop.matches) {
      // eslint-disable-next-line no-use-before-define
      toggleMenu(nav, navSections, false);
    }
  }
}

function openOnKeydown(e) {
  const focused = document.activeElement;
  const isNavDrop = focused.className === 'nav-drop';
  if (isNavDrop && (e.code === 'Enter' || e.code === 'Space')) {
    const dropExpanded = focused.getAttribute('aria-expanded') === 'true';
    // eslint-disable-next-line no-use-before-define
    toggleAllNavSections(focused.closest('.nav-sections'));
    focused.setAttribute('aria-expanded', dropExpanded ? 'false' : 'true');
  }
}

function focusNavSection() {
  document.activeElement.addEventListener('keydown', openOnKeydown);
}

/**
 * Toggles all nav sections
 * @param {Element} sections The container element
 * @param {Boolean} expanded Whether the element should be expanded or collapsed
 */
function toggleAllNavSections(sections, expanded = false) {
  sections.querySelectorAll('.nav-sections .default-content-wrapper > ul > li').forEach((section) => {
    section.setAttribute('aria-expanded', expanded);
  });
}

/**
 * Toggles the entire nav
 * @param {Element} nav The container element
 * @param {Element} navSections The nav sections within the container element
 * @param {*} forceExpanded Optional param to force nav expand behavior when not null
 */
function toggleMenu(nav, navSections, forceExpanded = null) {
  const expanded = forceExpanded !== null ? !forceExpanded : nav.getAttribute('aria-expanded') === 'true';
  const button = nav.querySelector('.nav-hamburger button');
  document.body.style.overflowY = (expanded || isDesktop.matches) ? '' : 'hidden';
  nav.setAttribute('aria-expanded', expanded ? 'false' : 'true');
  toggleAllNavSections(navSections, expanded || isDesktop.matches ? 'false' : 'true');
  button.setAttribute('aria-label', expanded ? 'Open navigation' : 'Close navigation');
  // enable nav dropdown keyboard accessibility
  const navDrops = navSections.querySelectorAll('.nav-drop');
  if (isDesktop.matches) {
    navDrops.forEach((drop) => {
      if (!drop.hasAttribute('tabindex')) {
        drop.setAttribute('tabindex', 0);
        drop.addEventListener('focus', focusNavSection);
      }
    });
  } else {
    navDrops.forEach((drop) => {
      drop.removeAttribute('tabindex');
      drop.removeEventListener('focus', focusNavSection);
    });
  }

  // enable menu collapse on escape keypress
  if (!expanded || isDesktop.matches) {
    // collapse menu on escape press
    window.addEventListener('keydown', closeOnEscape);
    // collapse menu on focus lost
    nav.addEventListener('focusout', closeOnFocusLost);
  } else {
    window.removeEventListener('keydown', closeOnEscape);
    nav.removeEventListener('focusout', closeOnFocusLost);
  }
}

/**
 * loads and decorates the header, mainly the nav
 * @param {Element} block The header block element
 */
export default async function decorate(block) {
  // load nav as fragment
  const navMeta = getMetadata('nav');
  const navPath = navMeta ? new URL(navMeta, window.location).pathname : '/nav';
  const fragment = await loadFragment(navPath);

  // decorate nav DOM
  block.textContent = '';
  const nav = document.createElement('nav');
  nav.id = 'nav';
  while (fragment.firstElementChild) nav.append(fragment.firstElementChild);

  const classes = ['brand', 'sections', 'tools'];
  classes.forEach((c, i) => {
    const section = nav.children[i];
    if (section) section.classList.add(`nav-${c}`);
  });

  const navBrand = nav.querySelector('.nav-brand');
  const brandLink = navBrand.querySelector('.button');
  if (brandLink) {
    brandLink.className = '';
    brandLink.closest('.button-container').className = '';
  }

  const navSections = nav.querySelector('.nav-sections');
  if (navSections) {
    navSections.querySelectorAll(':scope .default-content-wrapper > ul > li').forEach((navSection) => {
      if (navSection.querySelector('ul')) navSection.classList.add('nav-drop');
      navSection.addEventListener('click', () => {
        if (isDesktop.matches) {
          const expanded = navSection.getAttribute('aria-expanded') === 'true';
          toggleAllNavSections(navSections);
          navSection.setAttribute('aria-expanded', expanded ? 'false' : 'true');
        }
      });
    });
  }
  const searchContainer = document.createElement('div');
  searchContainer.className = 'nav-search';

  // Simple search icon + input markup (use inline SVG or Unicode for icon)
  searchContainer.innerHTML = `
    <input type="search" id="nav-search-input" placeholder="Search" aria-label="Search site" />
  `;

  // Append to nav-tools section if it exists, else append to nav
  const navTools = nav.querySelector('.nav-tools');
  if (navTools) {
    navTools.append(searchContainer);
  } else {
    nav.append(searchContainer);
  }
  
    const searchInput = searchContainer.querySelector('#nav-search-input');
      searchInput.addEventListener('keydown', (e) => {
  if (e.key === 'Enter') {
    const query = searchInput.value.trim();
    if (query) {
      const googleURL = `https://www.google.com/search?q=${encodeURIComponent(query)}`;
      window.open(googleURL, '_blank'); // open in new tab
    }
  }
});


  // hamburger for mobile
  const hamburger = document.createElement('div');
  hamburger.classList.add('nav-hamburger');
  hamburger.innerHTML = `<button type="button" aria-controls="nav" aria-label="Open navigation">
      <span class="nav-hamburger-icon"></span>
    </button>`;
  hamburger.addEventListener('click', () => toggleMenu(nav, navSections));
  nav.prepend(hamburger);
  nav.setAttribute('aria-expanded', 'false');
  // prevent mobile nav behavior on window resize
  toggleMenu(nav, navSections, isDesktop.matches);
  isDesktop.addEventListener('change', () => toggleMenu(nav, navSections, isDesktop.matches));


  const headerFixed = document.createElement('div');
  headerFixed.className = 'header-fixed';

  const signinBar = document.createElement('div');
  signinBar.className = 'signin-bar';
  signinBar.innerHTML = `
  <a href="/login">SIGN IN  </a>
  <a href="/login" class="lang-link">
    EN-US <span class="arrow-down">â–¼</span>
  </a>
  `;



  const navWrapper = document.createElement('div');
  navWrapper.className = 'nav-wrapper';
  navWrapper.append(nav);

  // Append both to the fixed wrapper
  headerFixed.append(signinBar);
  headerFixed.append(navWrapper);

  // Append fixed wrapper to block
  block.append(headerFixed);
}

window.addEventListener('scroll', function () {
  const navbar = document.querySelector('.nav-wrapper');
  if (window.scrollY > 50) {
    navbar.classList.add('shrink');
  } else {
    navbar.classList.remove('shrink');
  }
});


//header.css


/* header and nav layout */

header .nav-wrapper {
  position: fixed;
  height: 69px;
  width: 360px;
  /* smaller height for mobile */
  padding-top: 10px;
  /* less padding on mobile */
  padding-bottom: 10px;
  background-color: var(--background-color);

  z-index: 999;
  transition: padding 0.3s ease, height 0.3s ease;

}

header .nav-wrapper.shrink {
  height: 50px;
  padding-top: 5px;
  padding-bottom: 5px;
  box-shadow: 0 2px 5px rgba(0, 0, 0, 0.1);
}

/* tools */
header nav .nav-tools {
  grid-area: tools;
  display: flex;
}

.section.nav-tools {
  position: relative;
  /* make this a positioning context */
  display: flex;
  align-items: center;
}

.header-fixed {
  position: fixed;
  top: 0;
  left: 0;
  width: 100%;
  z-index: 999;
  background-color: #0f0f0f;
}

.signin-bar {
  background-color: #0f0f0f;
  text-align: right;
  font-size: 14px;
  min-height: 1px;
  height: 21px;
  border-bottom: 1px solid #ccc;
  padding-left: 14px;
  padding-right: 14px;
  width: auto;
  border-bottom-width: 0px;
}

.signin-bar a {
  color: #ffffff;
  display: inline;
  text-decoration: none;


}


input#nav-search-input {
  padding-left: 30px;
  width: 170px;
  height: 46px;
  padding-left: 32px;
  padding-right: 32px;
  border: 0px;
  background-color: #ebebeb8a;
}

span.icon.icon-search {
  position: absolute;
  transform: translateY(-50%);
  pointer-events: none;
  z-index: 10;
  width: 20px;
  height: 20px;
  transform: scaleX(-1);
  top: 15px;
  left: 32px;
  bottom: 3px;
  line-height: 0px;

}


header nav {
  box-sizing: border-box;
  display: grid;
  grid-template:
    'hamburger brand tools' var(--nav-height) 'sections sections sections' 1fr / auto 1fr auto;
  align-items: center;
  gap: 0 24px;
  margin: auto;
  max-width: 1248px;
  height: var(--nav-height);
  padding: 0 24px;
  font-family: var(--body-font-family);
}

header nav[aria-expanded='true'] {
  grid-template:
    'hamburger brand' var(--nav-height) 'sections sections' 1fr
    'tools tools' var(--nav-height) / auto 1fr;
  overflow-y: auto;
  min-height: 100dvh;
}

header nav p {
  margin: 0;
  line-height: 1;
}

header nav a:any-link {
  color: currentcolor;
}

/* hamburger */
header nav .nav-hamburger {
  grid-area: hamburger;
  height: 22px;
  display: flex;
  align-items: center;
}

header nav .nav-hamburger button {
  height: 22px;
  margin: 0;
  border: 0;
  border-radius: 0;
  padding: 0;
  background-color: var(--background-color);
  color: inherit;
  overflow: initial;
  text-overflow: initial;
  white-space: initial;
}

header nav .nav-hamburger-icon,
header nav .nav-hamburger-icon::before,
header nav .nav-hamburger-icon::after {
  box-sizing: border-box;
  display: block;
  position: relative;
  width: 20px;
}

header nav .nav-hamburger-icon::before,
header nav .nav-hamburger-icon::after {
  content: '';
  position: absolute;
  background: currentcolor;
}

header nav[aria-expanded='false'] .nav-hamburger-icon,
header nav[aria-expanded='false'] .nav-hamburger-icon::before,
header nav[aria-expanded='false'] .nav-hamburger-icon::after {
  height: 2px;
  border-radius: 2px;
  background: currentcolor;
}

header nav[aria-expanded='false'] .nav-hamburger-icon::before {
  top: -6px;
}

header nav[aria-expanded='false'] .nav-hamburger-icon::after {
  top: 6px;
}

header nav[aria-expanded='true'] .nav-hamburger-icon {
  height: 22px;
}

header nav[aria-expanded='true'] .nav-hamburger-icon::before,
header nav[aria-expanded='true'] .nav-hamburger-icon::after {
  top: 3px;
  left: 1px;
  transform: rotate(45deg);
  transform-origin: 2px 1px;
  width: 24px;
  height: 2px;
  border-radius: 2px;
}

header nav[aria-expanded='true'] .nav-hamburger-icon::after {
  top: unset;
  bottom: 3px;
  transform: rotate(-45deg);
}



/* brand */
header .nav-brand {
  grid-area: brand;
  flex-basis: 128px;
  font-size: var(--heading-font-size-s);
  font-weight: 700;
  line-height: 1;
}

header nav .nav-brand img {
  width: 128px;
  height: auto;
}

/* sections */
header nav .nav-sections {
  grid-area: sections;
  /* flex: 1 1 auto; */
  display: none;
  visibility: hidden;
}

header nav[aria-expanded='true'] .nav-sections {
  display: block;
  visibility: visible;
  align-self: start;
}

header nav .nav-sections ul {
  float: right;
  list-style: none;
  padding-left: 0;
  font-size: var(--body-font-size-s);
}

header nav .nav-sections ul>li {
  font-size: 14px;
}

header nav .nav-sections ul>li>ul {
  margin-top: 0;
}

header nav .nav-sections ul>li>ul>li {
  font-weight: 400;
}

@media (width >=900px) {
  header nav {
    display: flex;
    justify-content: start;
    gap: 0 0px;
    max-width: 1200px;
    padding: 0 32px;
  }

  header .nav-wrapper {
    height: 69px;
    width: 1440px;
    padding-top: 50px;
    padding-bottom: 50px;
  }

  header .nav-wrapper.shrink {
    height: 69px;
    padding-top: 5px;
    padding-bottom: 15px;
  }

  .header.block {
    width: 100%;
  }

  header nav[aria-expanded='true'] {
    min-height: 0;
    overflow: visible;
  }

  header nav[aria-expanded='true'] .nav-sections {
    width: 810px;
  }

  header nav .nav-hamburger {
    display: none;
    visibility: hidden;
  }


  header nav .nav-sections {
    display: block;
    visibility: visible;
    white-space: nowrap;
  }

  header nav[aria-expanded='true'] .nav-sections {
    align-self: unset;
  }

  header nav .nav-sections .nav-drop {
    position: relative;
    padding-right: 16px;
    cursor: pointer;
  }

  header nav .nav-sections .nav-drop::after {
    content: '';
    display: inline-block;
    position: absolute;
    top: 0.5em;
    right: 2px;
    transform: rotate(135deg);
    width: 6px;
    height: 6px;
    border: 2px solid currentcolor;
    border-radius: 0 1px 0 0;
    border-width: 2px 2px 0 0;
  }

  header nav .nav-sections .nav-drop[aria-expanded='true']::after {
    top: unset;
    bottom: 0.5em;
    transform: rotate(315deg);
  }

  header nav .nav-sections ul {
    display: flex;
    gap: 24px;
    margin: 0;
  }

  header nav .nav-sections .default-content-wrapper>ul>li {
    flex: 0 1 auto;
    position: relative;
  }

  header nav .nav-sections .default-content-wrapper>ul>li>ul {
    display: none;
    position: relative;
  }

  header nav .nav-sections .default-content-wrapper>ul>li[aria-expanded='true']>ul {
    display: block;
    position: absolute;
    left: -24px;
    width: 200px;
    top: 150%;
    padding: 16px;
    background-color: var(--light-color);
    white-space: initial;
  }

  header nav .nav-sections .default-content-wrapper>ul>li>ul::before {
    content: '';
    position: absolute;
    top: -8px;
    left: 16px;
    width: 0;
    height: 0;
    border-left: 8px solid transparent;
    border-right: 8px solid transparent;
    border-bottom: 8px solid var(--light-color);
  }

  header nav .nav-sections .default-content-wrapper>ul>li>ul>li {
    padding: 8px 0;
  }

  .signin-bar {
    background-color: #0f0f0f;
    text-align: right;
    font-size: 14px;
    min-height: 1px;
    height: 21px;
    border-bottom: 1px solid #ccc;
    padding-left: 14px;
    padding-right: 14px;
    width: 1000px;
    border-bottom-width: 0px;
    margin: 0px 150px;
  }

  nav#nav {
    width: 1228px;
    height: 68px;
    padding-left: 14px;
    padding-right: 14px;
    margin-right: 124px;
    margin-left: 80px;
  }

  .nav-wrapper .default-content-wrapper {
    margin-top: 0px;
    padding-left: 14px;
    padding-right: 14px;
  }

  .nav-wrapper .nav-tools .default-content-wrapper {
    width: 0px;
  }

  .nav-wrapper .default-content-wrapper p {
    width: 0px;
  }

  /* .nav-wrapper .nav-tools .default-content-wrapper .icon-search{
    top:0px;
    bottom:0px;
  }  */
}
